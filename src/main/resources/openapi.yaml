openapi: 3.0.3
tags:
  - name: model
    description: model operations
  - name: admin
    description: administrative operations
  - name: model-download
    description: model download operations using S3 presigned URLs
x-stoplight:
  id: 4vb63zck1yndo
info:
  title: Jaqpot API
  version: 1.0.0
  description: 'A modern RESTful API for model management and prediction services, built using Spring Boot and Kotlin. Supports seamless integration with machine learning workflows.'
  contact:
    name: Jaqpot
    url: 'https://jaqpot.org'
    email: upci.ntua@gmail.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
security:
  - bearerAuth: [ ]
servers:
  - url: 'https://api.jaqpot.org'
    description: Jaqpot API
paths:
  /v1/auth/validate:
    get:
      summary: Validate JWT
      description: Validate a JWT token
      security:
        - bearerAuth: [ ]
      tags:
        - auth
      operationId: validateJWT
      responses:
        '200':
          description: JWT is valid
        '401':
          description: Unauthorized
  /v1/admin/users:
    get:
      x-spring-paginated: true
      summary: Get paginated users for admins
      description: Retrieve a paginated list of users ordered by signup date descending. Only accessible by admin or UPCI users.
      security:
        - bearerAuth: [ ]
      tags:
        - admin
      operationId: getUsers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
            example: [ "createdAt|desc" ]
      responses:
        '200':
          description: Paginated list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pageable:
                    type: object
                    properties:
                      sort:
                        type: object
                        properties:
                          empty:
                            type: boolean
                          sorted:
                            type: boolean
                          unsorted:
                            type: boolean
                      offset:
                        type: integer
                      pageSize:
                        type: integer
                      pageNumber:
                        type: integer
                      unpaged:
                        type: boolean
                      paged:
                        type: boolean
                  last:
                    type: boolean
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
                  sort:
                    type: object
                    properties:
                      empty:
                        type: boolean
                      sorted:
                        type: boolean
                      unsorted:
                        type: boolean
                  first:
                    type: boolean
                  numberOfElements:
                    type: integer
                  empty:
                    type: boolean
        '401':
          description: Unauthorized - user must be authenticated as admin or UPCI user
        '403':
          description: Forbidden - insufficient privileges
  /v1/admin/models:
    get:
      x-spring-paginated: true
      summary: Get all models for admins
      description: Retrieve a paginated list of all models in the system. Only accessible by admin or UPCI users.
      security:
        - bearerAuth: [ ]
      tags:
        - admin
      operationId: getAllModels
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
            example: [ "field1|asc", "field2|desc" ]
      responses:
        '200':
          description: Paginated list of models
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModelSummary'
                  pageable:
                    type: object
                    properties:
                      sort:
                        type: object
                        properties:
                          empty:
                            type: boolean
                          sorted:
                            type: boolean
                          unsorted:
                            type: boolean
                      offset:
                        type: integer
                      pageSize:
                        type: integer
                      pageNumber:
                        type: integer
                      unpaged:
                        type: boolean
                      paged:
                        type: boolean
                  last:
                    type: boolean
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
                  sort:
                    type: object
                    properties:
                      empty:
                        type: boolean
                      sorted:
                        type: boolean
                      unsorted:
                        type: boolean
                  first:
                    type: boolean
                  numberOfElements:
                    type: integer
                  empty:
                    type: boolean
        '401':
          description: Unauthorized - user must be authenticated as admin or UPCI user
        '403':
          description: Forbidden - insufficient privileges
  /v1/user/models:
    get:
      x-spring-paginated: true
      summary: Get paginated models
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: getModels
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
            example: [ "field1|asc", "field2|desc" ]
      responses:
        '200':
          description: Paginated list of models
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModelSummary'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  pageSize:
                    type: integer
                  pageNumber:
                    type: integer
        '400':
          description: Invalid input
  /v1/models:
    post:
      summary: Create a new model
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: createModel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
      responses:
        '201':
          description: Model created successfully
        '400':
          description: Invalid input
      x-stoplight:
        id: 9ffjy7o77jc41

  /v1/models/search:
    get:
      x-spring-paginated: true
      summary: Search for models
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: searchModels
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Paginated list of models
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModelSummary'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  pageSize:
                    type: integer
                  pageNumber:
                    type: integer
        '400':
          description: Invalid input
  /v1/models/{modelId}/archive:
    post:
      summary: Archive a model
      description: Archives a model. Models that remain archived for more than 30 days will be permanently deleted.
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: archiveModel
      parameters:
        - name: modelId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 0
          description: The ID of the model to archive
      responses:
        '200':
          description: Model successfully archived
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 0
                  archivedAt:
                    type: string
                    format: date-time
                    description: Timestamp when the model was archived
        '404':
          description: Model not found
        '409':
          description: Model is already archived
        '403':
          description: Insufficient permissions to archive the model
  /v1/models/{modelId}/unarchive:
    post:
      summary: Unarchive a model
      description: Unarchives a previously archived model. This will cancel any scheduled deletion.
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: unarchiveModel
      parameters:
        - name: modelId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 0
          description: The ID of the model to unarchive
      responses:
        '200':
          description: Model successfully unarchived
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 0
        '404':
          description: Model not found
        '409':
          description: Model is not currently archived
        '403':
          description: Insufficient permissions to unarchive the model
  /v1/models/{modelId}/download/urls:
    get:
      summary: Get all presigned download URLs for model assets
      description: Get presigned URLs to download all available model assets (model file, preprocessor, and DOAs) directly from S3.
      security:
        - bearerAuth: [ ]
      tags:
        - model-download
      operationId: getModelDownloadUrls
      parameters:
        - name: modelId
          in: path
          required: true
          description: The ID of the model to get download URLs for
          schema:
            type: integer
            format: int64
            example: 0
        - name: expirationMinutes
          in: query
          required: false
          description: URL expiration time in minutes (default 10, max 60)
          schema:
            type: integer
            minimum: 1
            maximum: 60
            default: 10
      responses:
        '200':
          description: Presigned download URLs generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  modelUrl:
                    type: string
                    format: uri
                    description: Presigned S3 URL for downloading the model file
                    nullable: true
                  preprocessorUrl:
                    type: string
                    format: uri
                    description: Presigned S3 URL for downloading the preprocessor
                    nullable: true
                  doaUrls:
                    type: array
                    description: Presigned S3 URLs for downloading DOA files
                    items:
                      type: object
                      properties:
                        method:
                          type: string
                          description: DOA method name
                        downloadUrl:
                          type: string
                          format: uri
                          description: Presigned S3 URL for downloading the DOA file
                  expiresAt:
                    type: string
                    format: date-time
                    description: URL expiration timestamp for all URLs
        '404':
          description: Model not found
        '403':
          description: Insufficient permissions to download the model
  /v1/user/shared-models:
    get:
      x-spring-paginated: true
      summary: Get paginated shared models
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: getSharedModels
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
            example: [ "field1|asc", "field2|desc" ]
        - name: organizationId
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Paginated list of shared models
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModelSummary'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  pageSize:
                    type: integer
                  pageNumber:
                    type: integer
        '400':
          description: Invalid input
  /v1/user/archived-models:
    get:
      x-spring-paginated: true
      summary: Get paginated archived models
      description: Retrieve a paginated list of models that have been archived by the user
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: getArchivedModels
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
            example: [ "archivedAt|desc", "name|asc" ]
      responses:
        '200':
          description: Paginated list of archived models
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModelSummary'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  pageSize:
                    type: integer
                  pageNumber:
                    type: integer
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions to access archived models
  '/v1/models/{id}':
    get:
      summary: Get a Model
      description: Retrieve a single model by its ID
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: getModelById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the model to retrieve
          schema:
            type: integer
            format: int64
            example: 0
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '404':
          description: Model not found
    delete:
      summary: Delete a Model
      description: Delete a single model by its ID
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: deleteModelById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the model to delete
          schema:
            type: integer
            format: int64
            example: 0
      responses:
        '204':
          description: Model deleted successfully
        '404':
          description: Model not found
  '/v1/models/legacy/{id}':
    get:
      summary: Get a legacy model
      description: Retrieve a single model by its ID
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: getLegacyModelById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the model to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '404':
          description: Model not found
  /v1/models/{modelId}/predict:
    post:
      summary: Predict with Model
      description: Submit a dataset for prediction using a specific model
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: predictWithModel
      parameters:
        - name: modelId
          in: path
          required: true
          description: The ID of the model to use for prediction
          schema:
            type: integer
            format: int64
            example: 0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dataset'
      responses:
        '201':
          description: Prediction created successfully
        '400':
          description: Invalid Request
        '404':
          description: Model not found
        '500':
          description: Internal Server Error
  /v1/models/{modelId}/predict/csv:
    post:
      summary: Predict using CSV with Model
      description: Submit a dataset for prediction using a specific model
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: predictWithModelCSV
      parameters:
        - name: modelId
          in: path
          required: true
          description: The ID of the model to use for prediction
          schema:
            type: integer
            format: int64
            example: 0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetCSV'
      responses:
        '201':
          description: Prediction created successfully
        '400':
          description: Invalid Request
        '404':
          description: Model not found
        '500':
          description: Internal Server Error
  /v1/models/{id}/partial:
    patch:
      summary: Partially update specific fields of a model
      operationId: partiallyUpdateModel
      tags:
        - model
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - visibility
                - task
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 255
                description:
                  type: string
                  minLength: 3
                  maxLength: 50000
                visibility:
                  $ref: '#/components/schemas/ModelVisibility'
                task:
                  $ref: '#/components/schemas/ModelTask'
                tags:
                  type: string
                  maxLength: 1000
                sharedWithOrganizationIds:
                  type: array
                  items:
                    type: integer
                    format: int64
      responses:
        '200':
          description: Model fields updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '404':
          description: Model not found
        '400':
          description: Invalid input
  /v1/models/{modelId}/features/{featureId}:
    patch:
      summary: Update a feature for a specific model
      description: Update the name, description, and feature type of an existing feature within a specific model
      security:
        - bearerAuth: [ ]
      tags:
        - feature
      operationId: partiallyUpdateModelFeature
      parameters:
        - name: modelId
          in: path
          required: true
          description: The ID of the model containing the feature
          schema:
            type: integer
            format: int64
        - name: featureId
          in: path
          required: true
          description: The ID of the feature to update
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - featureType
              properties:
                name:
                  type: string
                  description: A name for the feature that will appear on top of the form field
                  maxLength: 255
                  example: Updated Feature Name
                units:
                  type: string
                  description: The units that this feature is using
                  example: mg/L
                range:
                  type: string
                  description: The range that this feature is using
                  example: 0-100
                description:
                  type: string
                  maxLength: 2000
                  example: An updated description for this feature
                featureType:
                  $ref: '#/components/schemas/FeatureType'
                possibleValues:
                  type: array
                  items:
                    $ref: '#/components/schemas/FeaturePossibleValue'
                  maxItems: 1000
      responses:
        '200':
          description: Feature updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
        '400':
          description: Invalid input
        '404':
          description: Model or feature not found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /v1/user/datasets:
    get:
      summary: Get Datasets by User ID
      description: Retrieve all datasets associated with a specific user ID
      security:
        - bearerAuth: [ ]
      tags:
        - dataset
      operationId: getDatasets
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
            example: [ "field1|asc", "field2|desc" ]
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dataset'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  pageSize:
                    type: integer
                  pageNumber:
                    type: integer
        '404':
          description: User or datasets not found
  /v1/user/models/{modelId}/datasets:
    post:
      summary: Create a dataset
      description: Create a new dataset from the provided data
      security:
        - bearerAuth: [ ]
      tags:
        - dataset
      operationId: createDataset
      parameters:
        - name: modelId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dataset'
      responses:
        '201':
          description: dataset created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        '400':
          description: invalid input
        '401':
          description: unauthorized
    get:
      summary: Get Datasets by Model ID
      description: Retrieve all datasets associated with a specific model ID
      security:
        - bearerAuth: [ ]
      tags:
        - dataset
      operationId: getDatasetsByModelId
      parameters:
        - name: modelId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
            example: [ "field1|asc", "field2|desc" ]
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dataset'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  pageSize:
                    type: integer
                  pageNumber:
                    type: integer
        '404':
          description: Model or datasets not found
  '/v1/datasets/{id}':
    get:
      summary: Get a Dataset
      description: Retrieve a single dataset by its ID
      security:
        - bearerAuth: [ ]
      tags:
        - dataset
      operationId: getDatasetById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the dataset to retrieve
          schema:
            type: integer
            format: int64
            example: 0
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        '404':
          description: Model not found
  /v1/organizations:
    get:
      summary: Get all organizations for a specific user
      operationId: getAllOrganizationsForUser
      tags:
        - organization
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
    post:
      summary: Create a new organization
      operationId: createOrganization
      tags:
        - organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        '201':
          description: Organization created successfully
  /v1/user/organizations:
    get:
      summary: Get all user organizations
      operationId: getAllOrganizationsByUser
      tags:
        - organization
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
  /v1/organizations/{id}/partial:
    patch:
      summary: Partially update an existing organization
      operationId: partialUpdateOrganization
      tags:
        - organization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - contactEmail
                - visibility
              properties:
                name:
                  type: string
                description:
                  type: string
                  minLength: 3
                  maxLength: 50000
                contactEmail:
                  type: string
                  format: email
                visibility:
                  $ref: '#/components/schemas/OrganizationVisibility'
              additionalProperties: false
      responses:
        '200':
          description: Organization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          description: Organization not found
  /v1/organizations/{name}:
    get:
      summary: Get organization by name
      operationId: getOrganizationByName
      tags:
        - organization
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          description: Organization not found
  /v1/organizations/{orgName}/invitations:
    get:
      tags:
        - organization-invitation
      summary: "Get all invitations for an organization"
      description: "This endpoint allows an organization admin to get all invitations for their organization."
      operationId: getAllInvitations
      parameters:
        - name: "orgName"
          in: "path"
          description: "Name of the organization"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Invitations retrieved successfully"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/OrganizationInvitation'
        "400":
          description: "Bad request, invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Unauthorized, only admins can access this endpoint"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: "Organization not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - organization-invitation
      summary: "Create new invitations for an organization"
      description: "This endpoint allows an organization admin to create new invitations for users."
      operationId: "createInvitations"
      parameters:
        - name: "orgName"
          in: "path"
          description: "Name of the organization"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Invitation request payload"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                emails:
                  type: "array"
                  items:
                    type: "string"
                    format: email
                  minItems: 1
                  maxItems: 10
                  description: "List of email addresses to invite"
                  example: [ "user1@example.com", "user2@example.com" ]
      responses:
        "201":
          description: "Invitations created successfully"
        "400":
          description: "Bad request, invalid input"
        "401":
          description: "Unauthorized, only admins can create invitations"
        "429":
          description: "Too many requests, rate limit exceeded"
  /v1/organizations/{orgId}/invitations/{id}/resend:
    post:
      tags:
        - organization-invitation
      summary: "Resend an invitation email"
      description: "This endpoint allows an organization admin to resend an invitation email if it has not expired. Only organization admins can access this endpoint."
      operationId: resendInvitation
      parameters:
        - name: "orgId"
          in: "path"
          description: "ID of the organization"
          required: true
          schema:
            type: integer
            format: int64
        - name: "id"
          in: "path"
          description: "ID of the invitation"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Invitation resent successfully"
        "400":
          description: "Bad request, invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Unauthorized, only organization admins can access this endpoint"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: "Organization or invitation not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "410":
          description: "Gone, the invitation has expired"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/organizations/{name}/invitations/{uuid}:
    get:
      tags:
        - organization-invitation
      summary: "Get the status of an invitation"
      description: "This endpoint allows a user to check the status of an invitation."
      operationId: "getInvitation"
      parameters:
        - name: "name"
          in: "path"
          description: "Name of the organization"
          required: true
          schema:
            type: "string"
        - name: "uuid"
          in: "path"
          description: "UUID of the invitation"
          required: true
          schema:
            type: "string"
            format: uuid
      responses:
        "200":
          description: "Invitation status retrieved successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationInvitation'
        "400":
          description: "Bad request, invalid input"
        "404":
          description: "Invitation not found"
    put:
      tags:
        - organization-invitation
      summary: "Update the status of an invitation"
      description: "This endpoint allows a user to update the status of an invitation."
      operationId: "updateInvitation"
      parameters:
        - name: "name"
          in: "path"
          description: "Name of the organization"
          required: true
          schema:
            type: string
        - name: "uuid"
          in: "path"
          description: "UUID of the invitation"
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: "Invitation status update payload"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInvitation'
      responses:
        "200":
          description: "Invitation status updated successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationInvitation'
        "400":
          description: "Bad request, invalid input"
        "404":
          description: "Invitation not found"
  '/v1/leads':
    get:
      summary: Get All Leads
      description: Retrieve all leads
      security:
        - bearerAuth: [ ]
      tags:
        - lead
      operationId: getAllLeads
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lead'
    post:
      summary: Create a Lead
      description: Create a new lead
      security:
        - bearerAuth: [ ]
      tags:
        - lead
      operationId: createLead
      responses:
        '201':
          description: Lead created successfully
        '400':
          description: Invalid request data
  '/v1/leads/{id}':
    get:
      summary: Get a Lead by ID
      description: Retrieve a single lead by its ID
      security:
        - bearerAuth: [ ]
      tags:
        - lead
      operationId: getLeadById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the lead to retrieve
          schema:
            type: integer
            format: int64
            example: 0
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lead'
        '404':
          description: Lead not found
    put:
      summary: Update a Lead by ID
      description: Update the details of an existing lead
      security:
        - bearerAuth: [ ]
      tags:
        - lead
      operationId: updateLeadById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the lead to update
          schema:
            type: integer
            format: int64
            example: 0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lead'
      responses:
        '200':
          description: Lead updated successfully
        '400':
          description: Invalid request data
        '404':
          description: Lead not found
    delete:
      summary: Delete a Lead by ID
      description: Delete a single lead by its ID
      security:
        - bearerAuth: [ ]
      tags:
        - lead
      operationId: deleteLeadById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the lead to delete
          schema:
            type: integer
            format: int64
            example: 0
      responses:
        '204':
          description: Lead deleted successfully
        '404':
          description: Lead not found
  /v1/user/api-keys:
    post:
      summary: Create an API Key for the User
      description: Generate and return an API key for programmatic access. This API key is associated with the user and can be used for authenticating future requests.
      security:
        - bearerAuth: [ ]
      tags:
        - api-keys
      operationId: createApiKey
      requestBody:
        description: Payload to create a new API key
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKey'
      responses:
        '201':
          description: API Key created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  clientKey:
                    type: string
                    description: The generated API key
                    example: "jq_abcd1234efgh5678ijkl"
                  clientSecret:
                    type: string
                    description: The generated API secret
        '400':
          description: Invalid input, such as a missing user ID
        '401':
          description: Unauthorized request, the user must be authenticated
        '404':
          description: User not found
    get:
      summary: Get All API Keys for the User
      description: Retrieve all API keys associated with the authenticated user.
      security:
        - bearerAuth: [ ]
      tags:
        - api-keys
      operationId: getAllApiKeysForUser
      responses:
        '200':
          description: Successful Response with the user's API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    clientKey:
                      type: string
                      description: The API key
                    note:
                      type: string
                      description: Description of the API key
                    createdAt:
                      type: string
                      format: date-time
                      description: Creation timestamp of the API key
                    expiresAt:
                      type: string
                      format: date-time
                      description: Expiration timestamp of the API key (optional)
                    enabled:
                      type: boolean
                      description: Whether the API key is active or disabled
        '401':
          description: Unauthorized request, the user must be authenticated
  /v1/user/api-keys/{key}:
    delete:
      summary: Delete an API Key
      description: Delete a specific API key associated with the authenticated user. Only the user or an admin can delete keys.
      security:
        - bearerAuth: [ ]
      tags:
        - api-keys
      operationId: deleteApiKey
      parameters:
        - name: key
          in: path
          required: true
          description: The API key to delete
          schema:
            type: string
            example: "jq_abcd1234efgh5678ijkl"
      responses:
        '204':
          description: API key deleted successfully
        '401':
          description: Unauthorized request, the user must be authenticated
        '404':
          description: API key not found
    patch:
      summary: Update API Key
      description: Update an API key's metadata, such as its note or status (enable/disable).
      security:
        - bearerAuth: [ ]
      tags:
        - api-keys
      operationId: updateApiKey
      parameters:
        - name: key
          in: path
          required: true
          description: The API key to update
          schema:
            type: string
            example: "jq_abcd1234efgh5678ijkl"
      requestBody:
        description: Payload to update API key metadata
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                note:
                  type: string
                  description: Updated description for the API key
                enabled:
                  type: boolean
                  description: Set to `false` to disable the API key
      responses:
        '200':
          description: API key updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    type: string
                    description: The updated API key
                  note:
                    type: string
                    description: The updated description of the API key
                  enabled:
                    type: boolean
                    description: Whether the API key is active or disabled
        '400':
          description: Invalid request, such as malformed input
        '401':
          description: Unauthorized request, the user must be authenticated
        '404':
          description: API key not found
  /v1/user/settings:
    get:
      summary: Get user settings
      operationId: getUserSettings
      tags:
        - user-settings
      responses:
        '200':
          description: User settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
        '401':
          description: Unauthorized
        '404':
          description: Settings not found
    post:
      summary: Create or update user settings
      operationId: saveUserSettings
      tags:
        - User Settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettings'
      responses:
        '200':
          description: Settings saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
        '401':
          description: Unauthorized
        '400':
          description: Invalid request
  /v1/user/avatar:
    delete:
      summary: Delete user avatar
      operationId: deleteUserAvatar
      tags:
        - user-settings
      responses:
        '204':
          description: Avatar successfully deleted
        '401':
          description: Unauthorized
        '404':
          description: Avatar not found
    #  Commented out until https://github.com/OpenAPITools/openapi-generator/issues/8333 is fixed
    #    post:
    #      summary: Upload user avatar
    #      operationId: uploadUserAvatar
    #      tags:
    #        - user-settings
    #      requestBody:
    #        required: true
    #        content:
    #          image/jpeg:
    #            schema:
    #              type: string
    #              format: binary
    #              maxLength: 1048576  # 1MB in bytes
    #              description: JPEG/JPG image (max 1MB)
    #          image/png:
    #            schema:
    #              type: string
    #              format: binary
    #              maxLength: 1048576  # 1MB in bytes
    #              description: PNG image (max 1MB)
    #          image/webp:
    #            schema:
    #              type: string
    #              format: binary
    #              maxLength: 1048576  # 1MB in bytes
    #              description: WebP image (max 1MB)
    #      responses:
    #        '200':
    #          description: Avatar uploaded successfully
    #          content:
    #            application/json:
    #              schema:
    #                type: object
    #                properties:
    #                  avatarUrl:
    #                    type: string
    #                    description: The CDN URL of the uploaded avatar
    #                    example: "https://d2zoqz4gyxc03g.cloudfront.net/avatars/123e4567-e89b-12d3-a456-426614174000.jpg"
    #        '400':
    #          description: Invalid request
    #          content:
    #            application/json:
    #              schema:
    #                type: object
    #                properties:
    #                  message:
    #                    type: string
    #                    example: "Invalid file type. Allowed types are: jpg, png, webp"
    #        '401':
    #          description: Unauthorized
    #        '413':
    #          description: File exceeds maximum size of 1MB
  /v1/users/{username}:
    get:
      summary: Get user data
      operationId: getUser
      tags:
        - user
      parameters:
        - name: username
          in: path
          required: true
          description: The ID of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: User data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found
  /v1/large-models:
    post:
      summary: Create a large model and get a presigned S3 upload URL
      security:
        - bearerAuth: [ ]
      tags:
        - large-model
      operationId: createLargeModel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
      responses:
        '201':
          description: Model created and upload URL generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  modelId:
                    type: string
                  uploadUrl:
                    type: string
        '400':
          description: Invalid input
        '403':
          description: Not authorized to upload model for this organization
  /v1/large-models/{modelId}/confirm-upload:
    post:
      summary: Confirm that a large model has been uploaded to S3
      security:
        - bearerAuth: [ ]
      tags:
        - large-model
      operationId: confirmLargeModelUpload
      parameters:
        - name: modelId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Upload confirmed successfully
        '400':
          description: Invalid or missing upload
        '403':
          description: Not authorized
        '409':
          description: Upload already confirmed or too large


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Model:
      type: object
      required:
        - libraries
        - dependentFeatures
        - independentFeatures
        - name
        - visibility
        - type
        - task
      properties:
        id:
          type: integer
          format: int64
          example: 0
        name:
          type: string
          minLength: 3
          maxLength: 255
          example: My Model
        description:
          type: string
          minLength: 3
          maxLength: 50000
          example: A description of your model
        type:
          $ref: '#/components/schemas/ModelType'
        jaqpotpyVersion:
          type: string
          example: 1.0.0
        doas:
          type: array
          items:
            $ref: '#/components/schemas/Doa'
          maxItems: 50
        libraries:
          type: array
          items:
            $ref: '#/components/schemas/Library'
          maxItems: 1000
        dependentFeatures:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
          maxItems: 1000
        independentFeatures:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
          maxItems: 1000
        sharedWithOrganizations:
          type: array
          items:
            $ref: '#/components/schemas/Organization'
        visibility:
          $ref: '#/components/schemas/ModelVisibility'
        task:
          $ref: '#/components/schemas/ModelTask'
        archived:
          type: boolean
        archivedAt:
          type: string
          format: date-time
          description: The date and time when the model was last archived.
          example: '2023-01-01T12:00:00Z'
        torchConfig:
          type: object
          maxProperties: 20
          additionalProperties:
            $ref: '#/components/schemas/AnyValue'
        preprocessors:
          type: array
          items:
            $ref: '#/components/schemas/Transformer'
          maxItems: 50
        featurizers:
          type: array
          items:
            $ref: '#/components/schemas/Transformer'
          maxItems: 50
        rawPreprocessor:
          type: string
          format: byte
          description: A base64 representation of the raw preprocessor.
          maxLength: 133000000  # ~100 MB in base64 characters
        rawModel:
          type: string
          format: byte
          description: A base64 representation of the raw model.
          maxLength: 133000000  # ~100 MB in base64 characters
        creator:
          $ref: '#/components/schemas/User'
        canEdit:
          description: If the current user can edit the model
          type: boolean
        isAdmin:
          type: boolean
        selectedFeatures:
          type: array
          items:
            type: string
          maxItems: 1000
        tags:
          type: string
          maxLength: 1000
        legacyPredictionService:
          type: string
        scores:
          type: object
          properties:
            train:
              type: array
              items:
                $ref: '#/components/schemas/Scores'
            test:
              type: array
              items:
                $ref: '#/components/schemas/Scores'
            crossValidation:
              type: array
              items:
                $ref: '#/components/schemas/Scores'
        rPbpkConfig:
          $ref: '#/components/schemas/RPbpkConfig'
        dockerConfig:
          $ref: '#/components/schemas/DockerConfig'
        createdAt:
          type: string
          format: date-time
          description: The date and time when the feature was created.
          example: '2023-01-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the model was last updated.
          example: '2023-01-01T12:00:00Z'
    ModelSummary:
      type: object
      required:
        - id
        - name
        - visibility
        - type
        - sharedWithOrganizations
        - createdAt
      properties:
        id:
          type: integer
          format: int64
          example: 0
        name:
          type: string
          minLength: 3
          maxLength: 255
          example: My Model
        visibility:
          $ref: '#/components/schemas/ModelVisibility'
        description:
          type: string
          minLength: 3
          maxLength: 50000
          example: A description of your model
        creator:
          $ref: '#/components/schemas/User'
        type:
          $ref: '#/components/schemas/ModelType'
        dependentFeaturesLength:
          type: integer
        independentFeaturesLength:
          type: integer
        sharedWithOrganizations:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationSummary'
        createdAt:
          type: string
          format: date-time
          description: The date and time when the feature was created.
          example: '2023-01-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the feature was last updated.
          example: '2023-01-01T12:00:00Z'
    Scores:
      type: object
      properties:
        regression:
          $ref: '#/components/schemas/RegressionScores'
        binaryClassification:
          $ref: '#/components/schemas/BinaryClassificationScores'
        multiclassClassification:
          $ref: '#/components/schemas/MulticlassClassificationScores'
    RegressionScores:
      type: object
      required:
        - yName
      properties:
        yName:
          type: string
        folds:
          type: integer
        r2:
          type: number
          format: float
        mae:
          type: number
          format: float
        rmse:
          type: number
          format: float
    BinaryClassificationScores:
      type: object
      required:
        - yName
      properties:
        labels:
          type: array
          items:
            type: string
        yName:
          type: string
        folds:
          type: integer
        accuracy:
          type: number
          format: float
        balancedAccuracy:
          type: number
          format: float
        precision:
          type: array
          items:
            type: number
            format: float
          maxItems: 1000
        recall:
          type: array
          items:
            type: number
            format: float
          maxItems: 1000
        f1Score:
          type: array
          items:
            type: number
            format: float
          maxItems: 1000
        jaccard:
          type: array
          items:
            type: number
            format: float
          maxItems: 1000
        matthewsCorrCoef:
          type: number
          format: float
        confusionMatrix:
          type: array
          items:
            type: array
            items:
              type: number
              format: float
            maxItems: 100
          maxItems: 100
    MulticlassClassificationScores:
      type: object
      required:
        - yName
      properties:
        labels:
          type: array
          items:
            type: string
        yName:
          type: string
        folds:
          type: integer
        accuracy:
          type: number
          format: float
        balancedAccuracy:
          type: number
          format: float
        precision:
          type: array
          items:
            type: number
            format: float
          maxItems: 1000
        recall:
          type: array
          items:
            type: number
            format: float
          maxItems: 1000
        f1Score:
          type: array
          items:
            type: number
            format: float
          maxItems: 1000
        jaccard:
          type: array
          items:
            type: number
            format: float
          maxItems: 1000
        matthewsCorrCoef:
          type: number
          format: float
        confusionMatrix:
          type: array
          items:
            type: array
            items:
              type: number
              format: float
            maxItems: 100
          maxItems: 100
    RPbpkConfig:
      type: object
      description: Configuration for the R PBPK models
      properties:
        odeSolver:
          type: string
    DockerConfig:
      type: object
      required:
        - appName
      properties:
        appName:
          type: string
          description: Unique identifier used for internal service discovery
          example: "my-docker-model"
          pattern: "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          maxLength: 63
        dockerImage:
          type: string
          description: Reference to the Docker image (for admin documentation)
          example: "my-repo/my-docker-model:1.0.0"
          maxLength: 255
        llmModelId:
          type: string
          description: The ID of the LLM model
    OrganizationSummary:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 0
        name:
          type: string
          example: My Organization
    ModelType:
      type: string
      enum:
        - SKLEARN_ONNX
        - TORCH_ONNX
        - TORCH_SEQUENCE_ONNX
        - TORCH_GEOMETRIC_ONNX
        - TORCHSCRIPT
        - R_BNLEARN_DISCRETE
        - R_CARET
        - R_GBM
        - R_NAIVE_BAYES
        - R_PBPK
        - R_RF
        - R_RPART
        - R_SVM
        - R_TREE_CLASS
        - R_TREE_REGR
        - DOCKER
        - OPENAI_LLM
        - CUSTOM_LLM
        - QSAR_TOOLBOX_CALCULATOR
        - QSAR_TOOLBOX_QSAR_MODEL
        - QSAR_TOOLBOX_PROFILER
    Transformer:
      type: object
      description: A preprocessor for the model
      required:
        - name
        - config
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: StandardScaler
        config:
          type: object
          maxProperties: 20
          additionalProperties:
            '$ref': '#/components/schemas/AnyValue'
    ModelVisibility:
      type: string
      enum:
        - PUBLIC
        - ORG_SHARED
        - PRIVATE
    ModelTask:
      type: string
      enum:
        - REGRESSION
        - BINARY_CLASSIFICATION
        - MULTICLASS_CLASSIFICATION
    Library:
      type: object
      required:
        - name
        - version
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Library Name
        version:
          type: string
          example: 1.24.0
        createdAt:
          type: string
          format: date-time
          description: The date and time when the feature was created.
          example: '2023-01-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the feature was last updated.
          example: '2023-01-01T12:00:00Z'
    PredictionDoa:
      type: object
      required:
        - method
        - data
      properties:
        id:
          type: integer
          format: int64
        method:
          $ref: '#/components/schemas/DoaMethod'
        data:
          type: object
          description: The doa calculated data
          additionalProperties:
            $ref: '#/components/schemas/AnyValue'
        createdAt:
          type: string
          format: date-time
          description: The date and time when the feature was created.
          example: '2023-01-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the feature was last updated.
          example: '2023-01-01T12:00:00Z'
    Doa:
      type: object
      required:
        - method
        - data
      properties:
        id:
          type: integer
          format: int64
        method:
          $ref: '#/components/schemas/DoaMethod'
        data:
          type: object
          maxProperties: 20
          additionalProperties:
            '$ref': '#/components/schemas/AnyValue'
        createdAt:
          type: string
          format: date-time
          description: The date and time when the feature was created.
          example: '2023-01-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the feature was last updated.
          example: '2023-01-01T12:00:00Z'
    DoaMethod:
      type: string
      enum:
        - LEVERAGE
        - BOUNDING_BOX
        - KERNEL_BASED
        - MEAN_VAR
        - MAHALANOBIS
        - CITY_BLOCK
      example: LEVERAGE
    LeverageDoa:
      type: object
      properties:
        hStar:
          type: number
          format: float
        doaMatrix:
          type: array
          items:
            type: array
            items:
              type: number
              format: float
    BoundingBoxDoa:
      type: object
      properties:
        boundingBox:
          type: array
          items:
            type: array
            items:
              type: number
              format: float
    KernelBasedDoa:
      type: object
      properties:
        sigma:
          type: number
          format: float
        gamma:
          type: number
          format: float
        threshold:
          type: number
          format: float
        kernelType:
          type: string
          enum:
            - GAUSSIAN
            - RBF
            - LAPLACIAN
            - PERCENTILE
            - MEAN_STD
          example: GAUSSIAN
        dataPoints:
          type: array
          items:
            type: array
            items:
              type: number
              format: float
    MeanVarDoa:
      type: object
      properties:
        bounds:
          type: array
          items:
            type: array
            items:
              type: number
              format: float
            maxItems: 1000
          maxItems: 1000
    MahalanobisDoa:
      type: object
      properties:
        meanVector:
          type: array
          items:
            type: number
            format: float
        invCovMatrix:
          type: array
          items:
            type: array
            items:
              type: number
              format: float
        threshold:
          type: number
          format: float
    CityBlockDoa:
      type: object
      properties:
        meanVector:
          type: array
          items:
            type: number
            format: float
          maxItems: 5000
        threshold:
          type: number
          format: float
    Feature:
      type: object
      required:
        - key
        - name
        - featureType
      properties:
        id:
          type: integer
          format: int64
          example: 1
        key:
          type: string
          description: A key that must start with a letter, followed by any combination of letters, digits, hyphens, or underscores. For example, 'abc123', 'abc-test', or 'Abc_test'. It cannot start with a digit.
          example: feature-key
        name:
          type: string
          description: A name for the feature that will appear on top of the form field
          maxLength: 255
          example: A feature name
        units:
          type: string
          description: The units for the feature
          maxLength: 255
          example: mg/s
        range:
          type: string
          description: The range for the feature
          maxLength: 255
          example: 0-100
        description:
          type: string
          maxLength: 2000
        featureType:
          $ref: '#/components/schemas/FeatureType'
        featureDependency:
          type: string
          enum:
            - DEPENDENT
            - INDEPENDENT
          example: DEPENDENT
        visible:
          type: boolean
          example: true
        possibleValues:
          type: array
          items:
            $ref: '#/components/schemas/FeaturePossibleValue'
          maxItems: 1000
        createdAt:
          type: string
          format: date-time
          description: The date and time when the feature was created.
          example: '2023-01-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the feature was last updated.
          example: '2023-01-01T12:00:00Z'
    FeaturePossibleValue:
      type: object
      required:
        - value
        - description
      properties:
        value:
          type: string
          example: "value"
        description:
          type: string
          example: "my description"
    FeatureType:
      type: string
      enum:
        - INTEGER
        - FLOAT
        - CATEGORICAL
        - SMILES
        - STRING
        - TEXT
        - BOOLEAN
        - FLOAT_ARRAY
        - STRING_ARRAY
        - IMAGE
      example: FLOAT
    DatasetType:
      type: string
      enum:
        - PREDICTION
        - CHAT
      example: "PREDICTION"
    DatasetResultType:
      type: string
      enum: [ BASE64 ]
    Dataset:
      type: object
      required:
        - type
        - input
        - entryType
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "My Dataset"
        type:
          $ref: '#/components/schemas/DatasetType'
        entryType:
          type: string
          enum:
            - ARRAY
          example: "ARRAY"
        input:
          type: array
          items: { }
          maxItems: 100
        result:
          type: array
          items: { }
        resultTypes:
          type: object
          maxItems: 100
          additionalProperties:
            $ref: '#/components/schemas/AnyValue'
          nullable: true
        status:
          type: string
          enum:
            - CREATED
            - EXECUTING
            - FAILURE
            - SUCCESS
        failureReason:
          type: string
        userId:
          type: string
        modelId:
          type: integer
          format: int64
        modelName:
          type: string
        executedAt:
          type: string
          format: date-time
        executionFinishedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    DatasetCSV:
      type: object
      required:
        - type
        - inputFile
      properties:
        id:
          type: integer
          format: int64
          example: 1
        type:
          $ref: '#/components/schemas/DatasetType'
        inputFile:
          type: string
          format: byte
          description: A base64 representation in CSV format of the input values.
          maxLength: 10000000 # ~10MB
        values:
          type: array
          items: { }
        status:
          type: string
          enum:
            - CREATED
            - EXECUTING
            - FAILURE
            - SUCCESS
        failureReason:
          type: string
        modelId:
          type: integer
          format: int64
        modelName:
          type: string
        executedAt:
          type: string
          format: date-time
        executionFinishedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Organization:
      type: object
      required:
        - name
        - contactEmail
        - visibility
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          pattern: '[\w\-_]+'
          minLength: 3
          maxLength: 200
          example: "my-awesome-org"
        creator:
          $ref: '#/components/schemas/User'
        visibility:
          $ref: '#/components/schemas/OrganizationVisibility'
        description:
          type: string
          minLength: 3
          maxLength: 50000
          example: "An awesome organization for managing models."
        organizationMembers:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationUser'
        contactEmail:
          type: string
          example: "contact@my-awesome-org.com"
        contactPhone:
          type: string
          example: "+1234567890"
        website:
          type: string
          example: "http://www.my-awesome-org.com"
        address:
          type: string
          example: "123 Organization St., City, Country"
        canEdit:
          description: If the current user can edit the organization
          type: boolean
        isMember:
          description: If the current user is a member of the organization
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    OrganizationUser:
      type: object
      required:
        - userId
        - associationType
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        avatarUrl:
          type: string
        associationType:
          $ref: '#/components/schemas/OrganizationUserAssociationType'
    OrganizationUserAssociationType:
      type: string
      enum:
        - ADMIN
        - MEMBER
    OrganizationVisibility:
      type: string
      enum:
        - PUBLIC
        - PRIVATE
    OrganizationInvitation:
      type: "object"
      required:
        - userEmail
        - status
        - expirationDate
      properties:
        id:
          type: "string"
          format: "uuid"
          description: "ID of the invitation"
        userId:
          type: string
          description: "The user id associated with that invitation"
        userEmail:
          type: "string"
          format: "email"
          description: "Email address of the invited user"
        status:
          type: "string"
          enum:
            - "PENDING"
            - "REJECTED"
            - "ACCEPTED"
          description: "Status of the invitation"
        expirationDate:
          type: string
          format: date-time
          description: "Expiration date of the invitation"
    Lead:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        name:
          type: string
        status:
          type: string
          enum: [ PENDING, APPROVED, DENIED ]
    PredictionModel:
      type: object
      required:
        - id
        - dependentFeatures
        - independentFeatures
        - type
        - task
      properties:
        id:
          type: integer
          format: int64
          description: "Unique identifier for the prediction model"
        dependentFeatures:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
          description: "List of dependent features for the model"
        independentFeatures:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
          description: "List of independent features for the model"
        type:
          $ref: '#/components/schemas/ModelType'
        rawModel:
          type: string
          description: "Raw model data in serialized format"
        rawPreprocessor:
          type: string
          description: "Raw preprocessor data in serialized format"
        doas:
          type: array
          items:
            $ref: '#/components/schemas/PredictionDoa'
          description: "List of Domain of Applicability (DoA) configurations"
        selectedFeatures:
          type: array
          items:
            type: string
          description: "List of feature names selected for the model"
        task:
          $ref: '#/components/schemas/ModelTask'
        featurizers:
          type: array
          items:
            $ref: '#/components/schemas/Transformer'
          description: "List of featurizer configurations applied to the model"
        preprocessors:
          type: array
          items:
            $ref: '#/components/schemas/Transformer'
          description: "List of preprocessor configurations applied to the model"
        torchConfig:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AnyValue'
          description: "Torch configuration settings, optional"
          nullable: true
        rPbpkOdeSolver:
          type: string
        legacyAdditionalInfo:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AnyValue'
          description: "Legacy additional information settings, optional"
          nullable: true
        legacyPredictionService:
          type: string
          nullable: true
          description: "Legacy prediction service information, if available"
    PredictionRequest:
      type: object
      required:
        - model
        - dataset
      properties:
        model:
          $ref: '#/components/schemas/PredictionModel'
        dataset:
          $ref: '#/components/schemas/Dataset'
    PredictionResponse:
      type: object
      required:
        - predictions
      properties:
        predictions:
          type: array
          items:
            $ref: '#/components/schemas/AnyValue'
    User:
      title: User
      x-stoplight:
        id: 9md5jpvcelos8
      type: object
      required:
        - id
      properties:
        id:
          type: string
          x-stoplight:
            id: 0gri1l9rmiv13
        username:
          type: string
          x-stoplight:
            id: x0pm25vavfibz
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        emailVerified:
          type: boolean
        avatarUrl:
          type: string
        canEdit:
          type: boolean
        createdAt:
          type: string
          format: date-time
          description: User signup date
          readOnly: true
    UserSettings:
      type: object
      properties:
        id:
          type: integer
          format: int64
        darkMode:
          type: boolean
          default: false
        collapseSidebar:
          type: boolean
          default: false
        avatarUrl:
          type: string
        isAdmin:
          type: boolean
          readOnly: true
        isUpciUser:
          type: boolean
          readOnly: true
    ApiKey:
      type: object
      required:
        - expirationTime
      properties:
        clientKey:
          type: string
          description: The generated API key
          example: "jq_abcd1234efgh5678ijkl"
        note:
          type: string
          description: A note for the API key
        userId:
          type: string
          description: The ID of the user associated with the API key
          example: "12345"
        expiresAt:
          type: string
          format: date-time
          nullable: true
          description: The expiration time of the API key (if any)
          example: "2024-12-31T23:59:59Z"
        expirationTime:
          type: string
          enum:
            - 'THREE_MONTHS'
            - 'SIX_MONTHS'
        lastUsed:
          type: string
          format: date-time
          nullable: true
          description: The last time the API key was used
          example: "2024-09-23T12:00:00Z"
        lastUsedIp:
          type: string
          nullable: true
          description: The IP address from which the API key was last used
          example: "192.168.1.1"
        enabled:
          type: boolean
          description: Whether the API key is active or disabled
    ErrorResponse:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Error message"
        code:
          type: "integer"
          description: "Error code"
    ErrorCode:
      type: string
      enum:
        - '1001'
      x-enum-varnames:
        - EMAIL_NOT_VERIFIED
      x-enum-descriptions:
        - User email is not verified
    AnyValue:
      description: Can be any value - string, number, boolean, array or object.
