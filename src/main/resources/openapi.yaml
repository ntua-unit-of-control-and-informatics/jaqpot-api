openapi: 3.0.3
tags:
  - name: model
    description: model operations
x-stoplight:
  id: 4vb63zck1yndo
info:
  title: Jaqpot API
  version: 1.0.0
  description: 'A modern RESTful API for molecular modeling, built using Spring Boot and Kotlin. Supports model management, prediction services, and integrates seamlessly with machine learning workflows.'
  contact:
    name: Jaqpot
    url: 'https://jaqpot.org'
    email: upci.ntua@gmail.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
security:
  - bearerAuth: [ ]
servers:
  - url: 'https://api.jaqpot.org'
    description: Jaqpot API
paths:
  /v1/auth/validate:
    get:
      summary: Validate JWT
      description: Validate a JWT token
      security:
        - bearerAuth: [ ]
      tags:
        - auth
      operationId: validateJWT
      responses:
        '200':
          description: JWT is valid
        '401':
          description: Unauthorized
  /v1/models:
    post:
      summary: Create a new model
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: createModel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
      responses:
        '201':
          description: Model created successfully
        '400':
          description: Invalid input
      x-stoplight:
        id: 9ffjy7o77jc41
  /v1/user/models:
    get:
      x-spring-paginated: true
      summary: Get paginated models
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: getModels
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
            example: [ "field1|asc", "field2|desc" ]
      responses:
        '200':
          description: Paginated list of models
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModelSummary'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  pageSize:
                    type: integer
                  pageNumber:
                    type: integer
        '400':
          description: Invalid input
  /v1/models/search:
    get:
      x-spring-paginated: true
      summary: Search for models
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: searchModels
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Paginated list of models
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModelSummary'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  pageSize:
                    type: integer
                  pageNumber:
                    type: integer
        '400':
          description: Invalid input
  /v1/user/shared-models:
    get:
      x-spring-paginated: true
      summary: Get paginated shared models
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: getSharedModels
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
            example: [ "field1|asc", "field2|desc" ]
        - name: organizationId
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Paginated list of shared models
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModelSummary'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  pageSize:
                    type: integer
                  pageNumber:
                    type: integer
        '400':
          description: Invalid input
  '/v1/models/{id}':
    get:
      summary: Get a Model
      description: Retrieve a single model by its ID
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: getModelById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the model to retrieve
          schema:
            type: integer
            format: int64
            example: 0
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '404':
          description: Model not found
    delete:
      summary: Delete a Model
      description: Delete a single model by its ID
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: deleteModelById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the model to delete
          schema:
            type: integer
            format: int64
            example: 0
      responses:
        '204':
          description: Model deleted successfully
        '404':
          description: Model not found
  '/v1/models/legacy/{id}':
    get:
      summary: Get a legacy model
      description: Retrieve a single model by its ID
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: getLegacyModelById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the model to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '404':
          description: Model not found
  /v1/models/{modelId}/predict:
    post:
      summary: Predict with Model
      description: Submit a dataset for prediction using a specific model
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: predictWithModel
      parameters:
        - name: modelId
          in: path
          required: true
          description: The ID of the model to use for prediction
          schema:
            type: integer
            format: int64
            example: 0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dataset'
      responses:
        '201':
          description: Prediction created successfully
        '400':
          description: Invalid Request
        '404':
          description: Model not found
        '500':
          description: Internal Server Error
  /v1/models/{modelId}/predict/csv:
    post:
      summary: Predict using CSV with Model
      description: Submit a dataset for prediction using a specific model
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: predictWithModelCSV
      parameters:
        - name: modelId
          in: path
          required: true
          description: The ID of the model to use for prediction
          schema:
            type: integer
            format: int64
            example: 0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetCSV'
      responses:
        '201':
          description: Prediction created successfully
        '400':
          description: Invalid Request
        '404':
          description: Model not found
        '500':
          description: Internal Server Error
  /v1/models/{id}/partial:
    patch:
      summary: Partially update specific fields of a model
      operationId: partiallyUpdateModel
      tags:
        - model
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - visibility
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 255
                description:
                  type: string
                  minLength: 3
                  maxLength: 50000
                visibility:
                  $ref: '#/components/schemas/ModelVisibility'
                tags:
                  type: string
                  maxLength: 1000
                sharedWithOrganizationIds:
                  type: array
                  items:
                    type: integer
                    format: int64
      responses:
        '200':
          description: Model fields updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '404':
          description: Model not found
        '400':
          description: Invalid input
  /v1/models/{modelId}/features/{featureId}:
    patch:
      summary: Update a feature for a specific model
      description: Update the name, description, and feature type of an existing feature within a specific model
      security:
        - bearerAuth: [ ]
      tags:
        - feature
      operationId: partiallyUpdateModelFeature
      parameters:
        - name: modelId
          in: path
          required: true
          description: The ID of the model containing the feature
          schema:
            type: integer
            format: int64
        - name: featureId
          in: path
          required: true
          description: The ID of the feature to update
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - featureType
              properties:
                name:
                  type: string
                  description: A name for the feature that will appear on top of the form field
                  maxLength: 255
                  example: Updated Feature Name
                units:
                  type: string
                  description: The units that this feature is using
                  example: mg/L
                description:
                  type: string
                  maxLength: 2000
                  example: An updated description for this feature
                featureType:
                  $ref: '#/components/schemas/FeatureType'
                possibleValues:
                  type: array
                  items:
                    $ref: '#/components/schemas/FeaturePossibleValue'
      responses:
        '200':
          description: Feature updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
        '400':
          description: Invalid input
        '404':
          description: Model or feature not found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /v1/user/datasets:
    get:
      summary: Get Datasets by User ID
      description: Retrieve all datasets associated with a specific user ID
      security:
        - bearerAuth: [ ]
      tags:
        - dataset
      operationId: getDatasets
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
            example: [ "field1|asc", "field2|desc" ]
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dataset'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  pageSize:
                    type: integer
                  pageNumber:
                    type: integer
        '404':
          description: User or datasets not found
  '/v1/datasets/{id}':
    get:
      summary: Get a Dataset
      description: Retrieve a single dataset by its ID
      security:
        - bearerAuth: [ ]
      tags:
        - dataset
      operationId: getDatasetById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the dataset to retrieve
          schema:
            type: integer
            format: int64
            example: 0
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        '404':
          description: Model not found
  /v1/organizations:
    get:
      summary: Get all organizations for a specific user
      operationId: getAllOrganizationsForUser
      tags:
        - organization
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'

    post:
      summary: Create a new organization
      operationId: createOrganization
      tags:
        - organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        '201':
          description: Organization created successfully
  /v1/user/organizations:
    get:
      summary: Get all user organizations
      operationId: getAllOrganizationsByUser
      tags:
        - organization
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
  /v1/organizations/{id}/partial:
    patch:
      summary: Partially update an existing organization
      operationId: partialUpdateOrganization
      tags:
        - organization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - contactEmail
                - visibility
              properties:
                name:
                  type: string
                description:
                  type: string
                contactEmail:
                  type: string
                  format: email
                visibility:
                  $ref: '#/components/schemas/OrganizationVisibility'
              additionalProperties: false
      responses:
        '200':
          description: Organization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          description: Organization not found
  /v1/organizations/{name}:
    get:
      summary: Get organization by name
      operationId: getOrganizationByName
      tags:
        - organization
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          description: Organization not found
  /v1/organizations/{orgName}/invitations:
    get:
      tags:
        - organization-invitation
      summary: "Get all invitations for an organization"
      description: "This endpoint allows an organization admin to get all invitations for their organization."
      operationId: getAllInvitations
      parameters:
        - name: "orgName"
          in: "path"
          description: "Name of the organization"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Invitations retrieved successfully"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/OrganizationInvitation'
        "400":
          description: "Bad request, invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Unauthorized, only admins can access this endpoint"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: "Organization not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - organization-invitation
      summary: "Create new invitations for an organization"
      description: "This endpoint allows an organization admin to create new invitations for users."
      operationId: "createInvitations"
      parameters:
        - name: "orgName"
          in: "path"
          description: "Name of the organization"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Invitation request payload"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                emails:
                  type: "array"
                  items:
                    type: "string"
                    format: email
                  minItems: 1
                  maxItems: 10
                  description: "List of email addresses to invite"
                  example: [ "user1@example.com", "user2@example.com" ]
      responses:
        "201":
          description: "Invitations created successfully"
        "400":
          description: "Bad request, invalid input"
        "401":
          description: "Unauthorized, only admins can create invitations"
        "429":
          description: "Too many requests, rate limit exceeded"
  /v1/organizations/{orgId}/invitations/{id}/resend:
    post:
      tags:
        - organization-invitation
      summary: "Resend an invitation email"
      description: "This endpoint allows an organization admin to resend an invitation email if it has not expired. Only organization admins can access this endpoint."
      operationId: resendInvitation
      parameters:
        - name: "orgId"
          in: "path"
          description: "ID of the organization"
          required: true
          schema:
            type: integer
            format: int64
        - name: "id"
          in: "path"
          description: "ID of the invitation"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Invitation resent successfully"
        "400":
          description: "Bad request, invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: "Unauthorized, only organization admins can access this endpoint"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: "Organization or invitation not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "410":
          description: "Gone, the invitation has expired"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/organizations/{name}/invitations/{uuid}:
    get:
      tags:
        - organization-invitation
      summary: "Get the status of an invitation"
      description: "This endpoint allows a user to check the status of an invitation."
      operationId: "getInvitation"
      parameters:
        - name: "name"
          in: "path"
          description: "Name of the organization"
          required: true
          schema:
            type: "string"
        - name: "uuid"
          in: "path"
          description: "UUID of the invitation"
          required: true
          schema:
            type: "string"
            format: uuid
      responses:
        "200":
          description: "Invitation status retrieved successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationInvitation'
        "400":
          description: "Bad request, invalid input"
        "404":
          description: "Invitation not found"
    put:
      tags:
        - organization-invitation
      summary: "Update the status of an invitation"
      description: "This endpoint allows a user to update the status of an invitation."
      operationId: "updateInvitation"
      parameters:
        - name: "name"
          in: "path"
          description: "Name of the organization"
          required: true
          schema:
            type: string
        - name: "uuid"
          in: "path"
          description: "UUID of the invitation"
          required: true
          schema:
            type: string
            format: uuid

      requestBody:
        description: "Invitation status update payload"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInvitation'
      responses:
        "200":
          description: "Invitation status updated successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationInvitation'
        "400":
          description: "Bad request, invalid input"
        "404":
          description: "Invitation not found"



components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Model:
      type: object
      required:
        - jaqpotpyVersion
        - libraries
        - dependentFeatures
        - independentFeatures
        - actualModel
        - name
        - visibility
        - type
      properties:
        id:
          type: integer
          format: int64
          example: 0
        meta:
          type: object
          description: A JSON object containing meta information.
          additionalProperties:
            type: object
        name:
          type: string
          minLength: 3
          maxLength: 255
          example: My Model
        description:
          type: string
          minLength: 3
          maxLength: 50000
          example: A description of your model
        type:
          $ref: '#/components/schemas/ModelType'
        jaqpotpyVersion:
          type: string
          example: 1.0.0
        libraries:
          type: array
          items:
            $ref: '#/components/schemas/Library'
        dependentFeatures:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
        independentFeatures:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
        sharedWithOrganizations:
          type: array
          items:
            $ref: '#/components/schemas/Organization'
        visibility:
          $ref: '#/components/schemas/ModelVisibility'
        pretrained:
          type: boolean
          example: false
        actualModel:
          type: string
          format: byte
          description: A base64 representation of the actual model.
          x-field-extra-annotation: '@com.fasterxml.jackson.annotation.JsonProperty(access = JsonProperty.Access.WRITE_ONLY)'
        creator:
          $ref: '#/components/schemas/User'
        canEdit:
          description: If the current user can edit the model
          type: boolean
        isAdmin:
          type: boolean
        tags:
          type: string
          maxLength: 1000
        legacyPredictionService:
          type: string
        extraConfig:
          $ref: '#/components/schemas/ModelExtraConfig'
        createdAt:
          type: DateTime
          format: date-time
          description: The date and time when the feature was created.
          example: '2023-01-01T12:00:00Z'
        updatedAt:
          type: DateTime
          description: The date and time when the feature was last updated.
          example: '2023-01-01T12:00:00Z'
    ModelSummary:
      type: object
      required:
        - id
        - name
        - visibility
        - type
        - sharedWithOrganizations
        - createdAt
      properties:
        id:
          type: integer
          format: int64
          example: 0
        name:
          type: string
          minLength: 3
          maxLength: 255
          example: My Model
        visibility:
          $ref: '#/components/schemas/ModelVisibility'
        description:
          type: string
          minLength: 3
          maxLength: 50000
          example: A description of your model
        creator:
          $ref: '#/components/schemas/User'
        type:
          $ref: '#/components/schemas/ModelType'
        dependentFeaturesLength:
          type: integer
        independentFeaturesLength:
          type: integer
        sharedWithOrganizations:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationSummary'
        createdAt:
          type: DateTime
          format: date-time
          description: The date and time when the feature was created.
          example: '2023-01-01T12:00:00Z'
        updatedAt:
          type: DateTime
          description: The date and time when the feature was last updated.
          example: '2023-01-01T12:00:00Z'

    OrganizationSummary:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 0
        name:
          type: string
          example: My Organization

    ModelType:
      type: string
      enum:
        - SKLEARN
        - TORCH
        - R_BNLEARN_DISCRETE
        - R_CARET
        - R_GBM
        - R_NAIVE_BAYES
        - R_PBPK
        - R_RF
        - R_RPART
        - R_SVM
        - R_TREE_CLASS
        - R_TREE_REGR
        - QSAR_TOOLBOX
    ModelExtraConfig:
      type: object
      description: A JSON object containing extra configuration for the model
      properties:
        torchConfig:
          type: object
          additionalProperties:
            type: object
        preprocessors:
          type: array
          items:
            $ref: '#/components/schemas/Preprocessor'
        featurizers:
          type: array
          items:
            $ref: '#/components/schemas/Featurizer'
    Preprocessor:
      type: object
      description: A preprocessor for the model
      required:
        - name
        - config
      properties:
        name:
          type: string
          example: StandardScaler
        config:
          type: object
          additionalProperties:
            type: object
    Featurizer:
      type: object
      description: A featurizer for the model
      required:
        - name
        - config
      properties:
        name:
          type: string
          example: RDKitFeaturizer
        config:
          type: object
          additionalProperties:
            type: object
    ModelVisibility:
      type: string
      enum:
        - PUBLIC
        - ORG_SHARED
        - PRIVATE
    Library:
      type: object
      required:
        - name
        - version
      properties:
        # For example:
        # Define the properties of Library here
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Library Name
        version:
          type: string
          example: 1.24.0
        createdAt:
          type: DateTime
          format: date-time
          description: The date and time when the feature was created.
          example: '2023-01-01T12:00:00Z'
        updatedAt:
          type: DateTime
          description: The date and time when the feature was last updated.
          example: '2023-01-01T12:00:00Z'
    Feature:
      type: object
      required:
        - key
        - name
        - featureType
      properties:
        id:
          type: integer
          format: int64
          example: 1
        meta:
          type: object
          description: A JSON object containing meta information.
          additionalProperties:
            type: object
        key:
          type: string
          pattern: "^[a-zA-Z][a-zA-Z0-9_-]*$"
          description: A key that must start with a letter, followed by any combination of letters, digits, hyphens, or underscores. For example, 'abc123', 'abc-test', or 'Abc_test'. It cannot start with a digit.
          example: feature-key
        name:
          type: string
          description: A name for the feature that will appear on top of the form field
          maxLength: 255
          example: A feature name
        units:
          type: string
          description: A name for the feature that will appear on top of the form field
          maxLength: 255
          example: A feature unit
        description:
          type: string
          maxLength: 2000
        featureType:
          $ref: '#/components/schemas/FeatureType'
        featureDependency:
          type: string
          enum:
            - DEPENDENT
            - INDEPENDENT
          example: DEPENDENT
        visible:
          type: boolean
          example: true
        possibleValues:
          type: array
          items:
            $ref: '#/components/schemas/FeaturePossibleValue'
        createdAt:
          type: DateTime
          format: date-time
          description: The date and time when the feature was created.
          example: '2023-01-01T12:00:00Z'
        updatedAt:
          type: DateTime
          description: The date and time when the feature was last updated.
          example: '2023-01-01T12:00:00Z'

    FeaturePossibleValue:
      type: object
      required:
        - key
        - value
      properties:
        key:
          type: string
          example: "value"
        value:
          type: string
          example: "value"
    FeatureType:
      type: string
      enum:
        - INTEGER
        - FLOAT
        - CATEGORICAL
        - SMILES
        - STRING
        - TEXT
      example: FLOAT
    DatasetType:
      type: string
      enum:
        - PREDICTION
      example: "PREDICTION"
    Dataset:
      type: object
      required:
        - type
        - input
        - entryType
      properties:
        id:
          type: integer
          format: int64
          example: 1
        type:
          $ref: '#/components/schemas/DatasetType'
        entryType:
          type: string
          enum:
            - ARRAY
          example: "ARRAY"
        input:
          type: array
          items: { }
        result:
          type: array
          items: { }
        status:
          type: string
          enum:
            - CREATED
            - EXECUTING
            - FAILURE
            - SUCCESS
        failureReason:
          type: string
        userId:
          type: string
        modelId:
          type: integer
          format: int64
        modelName:
          type: string
        executedAt:
          type: DateTime
        executionFinishedAt:
          type: DateTime
        createdAt:
          type: DateTime
        updatedAt:
          type: DateTime
    DatasetCSV:
      type: object
      required:
        - type
        - inputFile
      properties:
        id:
          type: integer
          format: int64
          example: 1
        type:
          $ref: '#/components/schemas/DatasetType'
        inputFile:
          type: string
          format: byte
          description: A base64 representation in CSV format of the input values.
        values:
          type: array
          items: { }
        status:
          type: string
          enum:
            - CREATED
            - EXECUTING
            - FAILURE
            - SUCCESS
        failureReason:
          type: string
        modelId:
          type: integer
          format: int64
        modelName:
          type: string
        executedAt:
          type: DateTime
        executionFinishedAt:
          type: DateTime
        createdAt:
          type: DateTime
        updatedAt:
          type: DateTime


    Organization:
      type: object
      required:
        - name
        - contactEmail
        - visibility
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          pattern: '[\w\-_]+'
          minLength: 3
          maxLength: 200
          example: "my-awesome-org"
        creator:
          $ref: '#/components/schemas/User'
        visibility:
          $ref: '#/components/schemas/OrganizationVisibility'
        description:
          type: string
          minLength: 3
          maxLength: 2000
          example: "An awesome organization for managing models."
        organizationMembers:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationUser'
        contactEmail:
          type: string
          example: "contact@my-awesome-org.com"
        contactPhone:
          type: string
          example: "+1234567890"
        website:
          type: string
          example: "http://www.my-awesome-org.com"
        address:
          type: string
          example: "123 Organization St., City, Country"
        canEdit:
          description: If the current user can edit the organization
          type: boolean
        isCreator:
          description: If the current user is the creator of the organization
          type: boolean
        created_at:
          type: DateTime
        updated_at:
          type: DateTime

    OrganizationUser:
      type: object
      required:
        - userId
        - email
        - username
        - associationType
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        associationType:
          $ref: '#/components/schemas/OrganizationUserAssociationType'

    OrganizationUserAssociationType:
      type: string
      enum:
        - ADMIN
        - MEMBER
    OrganizationVisibility:
      type: string
      enum:
        - PUBLIC
        - PRIVATE
    OrganizationInvitation:
      type: "object"
      required:
        - userEmail
        - status
        - expirationDate
      properties:
        id:
          type: "string"
          format: "uuid"
          description: "ID of the invitation"
        userId:
          type: string
          description: "The user id associated with that invitation"
        userEmail:
          type: "string"
          format: "email"
          description: "Email address of the invited user"
        status:
          type: "string"
          enum:
            - "PENDING"
            - "REJECTED"
            - "ACCEPTED"
          description: "Status of the invitation"
        expirationDate:
          type: DateTime
          description: "Expiration date of the invitation"
    User:
      title: User
      x-stoplight:
        id: 9md5jpvcelos8
      type: object
      required:
        - id
      properties:
        id:
          type: string
          x-stoplight:
            id: 0gri1l9rmiv13
        username:
          type: string
          x-stoplight:
            id: x0pm25vavfibz
        email:
          type: string
        emailVerified:
          type: boolean
    ErrorResponse:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Error message"
        code:
          type: "integer"
          description: "Error code"
    ErrorCode:
      type: string
      enum:
        - '1001'
      x-enum-varnames:
        - EMAIL_NOT_VERIFIED
      x-enum-descriptions:
        - User email is not verified
    AnyValue:
      description: Can be any value - string, number, boolean, array or object.
