openapi: 3.0.3
tags:
  - name: model
    description: model operations
x-stoplight:
  id: 4vb63zck1yndo
info:
  title: Jaqpot API
  version: 1.0.0
  description: 'A modern RESTful API for molecular modeling, built using Spring Boot and Kotlin. Supports model management, prediction services, and integrates seamlessly with machine learning workflows.'
  contact:
    name: Jaqpot
    url: 'https://jaqpot.org'
    email: upci.ntua@gmail.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
security:
  - bearerAuth: [ ]
servers:
  - url: 'https://api.jaqpot.org'
    description: Jaqpot API
paths:
  /v1/models:
    post:
      summary: Create a new model
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: createModel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
      responses:
        '201':
          description: Model created successfully
        '400':
          description: Invalid input
      x-stoplight:
        id: 9ffjy7o77jc41
  '/v1/models/{id}':
    get:
      summary: Get a Model
      description: Retrieve a single model by its ID
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: getModelById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the model to retrieve
          schema:
            type: integer
            format: int64
            example: 0
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '404':
          description: Model not found
  /v1/models/{modelId}/predict:
    post:
      summary: Predict with Model
      description: Submit a dataset for prediction using a specific model
      security:
        - bearerAuth: [ ]
      tags:
        - model
      operationId: predictWithModel
      parameters:
        - name: modelId
          in: path
          required: true
          description: The ID of the model to use for prediction
          schema:
            type: integer
            format: int64
            example: 0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dataset'
      responses:
        '201':
          description: Prediction created successfully
        '400':
          description: Invalid Request
        '404':
          description: Model not found
        '500':
          description: Internal Server Error
  '/v1/datasets/{id}':
    get:
      summary: Get a Dataset
      description: Retrieve a single dataset by its ID
      security:
        - bearerAuth: [ ]
      tags:
        - dataset
      operationId: getDatasetById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the dataset to retrieve
          schema:
            type: integer
            format: int64
            example: 0
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        '404':
          description: Model not found
  /v1/organizations:
    get:
      summary: Get all organizations
      operationId: getAllOrganizations
      tags:
        - Organization
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'

    post:
      summary: Create a new organization
      operationId: createOrganization
      tags:
        - Organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        '201':
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'

  /v1/organizations/{id}:
    get:
      summary: Get organization by ID
      operationId: getOrganizationById
      tags:
        - Organization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          description: Organization not found

    put:
      summary: Update an existing organization
      operationId: updateOrganization
      tags:
        - Organization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        '200':
          description: Organization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          description: Organization not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Base:
      type: object
      properties:
        updatedAt:
          type: LocalDateTime
          description: The date and time when the feature was last updated.
          example: '2023-01-01T12:00:00Z'
        createdAt:
          type: LocalDateTime
          description: The date and time when the feature was last updated.
          example: '2023-01-01T12:00:00Z'
    Model:
      allOf: # Inherits from Base
        - $ref: '#/components/schemas/Base'
        - type: object
          required:
            - jaqpotpyVersion
            - libraries
            - dependentFeatures
            - independentFeatures
            - actualModel
            - name
            - description
            - visibility
          properties:
            id:
              type: integer
              format: int64
              example: 0
            meta:
              type: object
              description: A JSON object containing meta information.
              additionalProperties:
                type: object
            name:
              type: string
              minLength: 3
              maxLength: 255
              example: My Model
            description:
              type: string
              example: A description of your model
            type:
              type: string
              example: some type
            jaqpotpyVersion:
              type: string
              example: 1.0.0
            libraries:
              type: array
              items:
                $ref: '#/components/schemas/Library'
            dependentFeatures:
              type: array
              items:
                $ref: '#/components/schemas/Feature'
            independentFeatures:
              type: array
              items:
                $ref: '#/components/schemas/Feature'
            visibility:
              type: string
              enum:
                - PUBLIC
                - ORG_SHARED
                - PRIVATE
            reliability:
              type: integer
              example: 5
            pretrained:
              type: boolean
              example: false
            actualModel:
              type: string
              format: byte
              description: A base64 representation of the actual model.
              x-field-extra-annotation: '@com.fasterxml.jackson.annotation.JsonProperty(access = JsonProperty.Access.WRITE_ONLY)'
            creator:
              $ref: '#/components/schemas/User'
    Library:
      allOf: # Inherits from Base
        - $ref: '#/components/schemas/Base'
        - type: object
          required:
            - name
            - version
          properties:
            # For example:
            # Define the properties of Library here
            id:
              type: integer
              format: int64
            name:
              type: string
              example: Library Name
            version:
              type: string
              example: 1.24.0

    Feature:
      allOf: # Inherits from Base
        - $ref: '#/components/schemas/Base'
        - type: object
          required:
            - name
            - description
            - featureType
          properties:
            id:
              type: integer
              format: int64
              example: 1
            meta:
              type: object
              description: A JSON object containing meta information.
              additionalProperties:
                type: object
            name:
              type: string
              example: Feature Name
            description:
              type: string
              maxLength: 2000
            featureType:
              type: string
              enum:
                - NUMERICAL
                - CATEGORICAL
              example: NUMERICAL
            featureDependency:
              type: string
              enum:
                - DEPENDENT
                - INDEPENDENT
              example: DEPENDENT
            visible:
              type: boolean
              example: true
            possibleValues:
              type: array
              items:
                type: string

    Dataset:
      allOf: # Inherits from Base
        - $ref: '#/components/schemas/Base'
        - type: object
          required:
            - type
            - input
          properties:
            id:
              type: integer
              format: int64
              example: 1
            type:
              type: string
              enum:
                - PREDICTION
              example: "PREDICTION"
            input:
              type: array
              items:
                $ref: '#/components/schemas/DataEntry'
            results:
              type: array
              items:
                $ref: '#/components/schemas/DataEntry'
            status:
              type: string
              enum:
                - CREATED
                - EXECUTING
                - FAILURE
                - SUCCESS
            failureReason:
              type: string
    DataEntry:
      allOf: # Inherits from Base
        - $ref: '#/components/schemas/Base'
        - type: object
          required:
            - type
            - values
          properties:
            id:
              type: integer
              format: int64
              example: 1
            type:
              type: string
              enum:
                - ARRAY
              example: "ARRAY"
            values:
              type: array
              items: { }

    User:
      title: User
      x-stoplight:
        id: 9md5jpvcelos8
      type: object
      properties:
        id:
          type: string
          x-stoplight:
            id: 0gri1l9rmiv13
        name:
          type: string
          x-stoplight:
            id: x0pm25vavfibz
    Organization:
      allOf: # Inherits from Base
        - $ref: '#/components/schemas/Base'
        - type: object
          required:
            - name
            - userIds
            - models
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
              pattern: '[\w\-_]+'
              minLength: 3
              maxLength: 200
              example: "my-awesome-org"
            adminUserId:
              type: string
            description:
              type: string
              minLength: 3
              maxLength: 2000
              nullable: true
              example: "An awesome organization for managing models."
            userIds:
              type: array
              items:
                type: string
            models:
              type: array
              items:
                $ref: '#/components/schemas/Model'
            contactEmail:
              type: string
              nullable: true
              example: "contact@my-awesome-org.com"
            contactPhone:
              type: string
              nullable: true
              example: "+1234567890"
            website:
              type: string
              nullable: true
              example: "http://www.my-awesome-org.com"
            address:
              type: string
              nullable: true
              example: "123 Organization St., City, Country"
    AnyValue:
      description: Can be any value - string, number, boolean, array or object.
